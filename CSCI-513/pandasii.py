# -*- coding: utf-8 -*-
import pandas as pd
nba = pd.read_csv("./nba.csv")
print(nba)
print(len(nba))
print(nba.shape)
pd.set_option("display.precision", 2)
print(nba.head(10))
print(nba.tail())
print(nba.info())
print(nba.columns)
print(nba.describe(include=object))
print(nba["team_id"])
print(nba.loc[1])
print(nba.iloc[1])
print(nba.loc[5555:5559, ["fran_id", "opp_fran", "pts", "opp_pts"]])
print(nba["team_id"].value_counts())
print(nba[nba["year_id"] >= 2010])
print(nba[(nba["_iscopy"] == 0) & (nba["pts"] > 100) & (nba["opp_pts"] > 100)])
print(nba.query('_iscopy == 0 and pts > 100 and opp_pts > 100'))
print(nba.query('_iscopy == 0 and ((pts - opp_pts == 1) or (pts - opp_pts == -1))')[['pts', 'opp_pts']])
print("Sum of all points:", nba["pts"].sum())
print("Minimum points scored:", nba["pts"].min())
print("Maximum points scored:", nba["pts"].max())
print(nba.groupby("fran_id")["pts"].sum())
print(nba[nba["fran_id"] == "Knicks"].groupby("year_id")["pts"].max().plot())
print(nba["fran_id"].value_counts().head(10).plot(kind="bar"))
print(nba[(nba["fran_id"] == "Heat") & (nba["year_id"] == 2013) & (nba["_iscopy"] == 0)]["game_result"].value_counts().plot(kind="pie"))
print(nba[nba["fran_id"] == "Celtics"].groupby("year_id")["pts"].max().plot(label='BOS', legend=True))
print(nba[nba["fran_id"] == "Knicks"].groupby("year_id")["pts"].max().plot(label='NYK', legend=True))
url = "https://www.basketball-reference.com/leagues/NBA_2024_games-december.html"
tables = pd.read_html(url)
print('Number of tables =',len(tables))
print(tables[0].head())
df = tables[0]
df = df.fillna('')
import numpy as np
df.replace(np.nan, '')
print(df)
df = tables[0]
df = df.fillna({'Unnamed: 7': 'no', 'Notes': ''})
df.drop_duplicates()
df.rename(columns=str.upper)
# https://wesmckinney.com/book/pandas-basics
#------------------------------------------------------------------------------
print(titanic)
print(len(titanic))
print(titanic.shape)
#pd.set_option("display.precision", 2)
print(titanic.head(10))
print(titanic.tail())
print(titanic.info())
print(titanic.columns)
print(titanic.describe(include=object))
print(titanic["boat"])
print(titanic["age"])
print(titanic["age"] == '?')
print(titanic[titanic["age"] == '?'])
titanic[titanic["age"] == '?'] = 0
titanic['age'] = titanic['age'].astype(float)
print(titanic.loc[1])
print(titanic.iloc[1])
print(titanic.loc[555:559, ["pclass", "fare", "body", "home.dest"]])
print(titanic["age"].value_counts())
print(titanic[titanic["age"] >= '50'])
#------------------------------------------------------------------------------
